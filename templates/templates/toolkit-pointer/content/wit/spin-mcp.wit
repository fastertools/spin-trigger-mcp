// Model Context Protocol (MCP) interface for Spin components
// Based on the MCP specification: https://modelcontextprotocol.io/specification
package spin:mcp-trigger;

interface mcp-types {
    /// JSON-RPC error codes as per MCP specification
    enum error-code {
        parse-error,           // -32700
        invalid-request,       // -32600
        method-not-found,      // -32601
        invalid-params,        // -32602
        internal-error,        // -32603
    }

    /// Error response
    record error {
        code: s32,
        message: string,
        data: option<string>,
    }

    /// Tool metadata
    record tool {
        name: string,
        description: string,
        input-schema: string,  // JSON Schema as string
    }

    /// Resource metadata
    record resource-info {
        uri: string,
        name: string,
        description: option<string>,
        mime-type: option<string>,
    }

    /// Resource contents
    record resource-contents {
        uri: string,
        mime-type: option<string>,
        text: option<string>,
        blob: option<list<u8>>,
    }

    /// Prompt metadata
    record prompt {
        name: string,
        description: option<string>,
        arguments: list<prompt-argument>,
    }

    /// Prompt argument definition
    record prompt-argument {
        name: string,
        description: option<string>,
        required: bool,
    }

    /// Prompt message
    record prompt-message {
        role: string,  // "user", "assistant", "system"
        content: string,
    }

    /// Tool invocation result
    variant tool-result {
        text(string),
        json(string),
        binary(list<u8>),
        error(error),
    }

    /// Method request types
    variant request {
        // Tool methods
        tools-list,
        tools-call(tools-call-params),
        
        // Resource methods
        resources-list,
        resources-read(resource-read-params),
        resources-subscribe(resource-subscribe-params),
        resources-unsubscribe(resource-unsubscribe-params),
        
        // Prompt methods
        prompts-list,
        prompts-get(prompt-get-params),
        
        // Other
        ping,
    }

    record tools-call-params {
        name: string,
        arguments: string,  // JSON string
    }

    record resource-read-params {
        uri: string,
    }

    record resource-subscribe-params {
        uri: string,
    }

    record resource-unsubscribe-params {
        uri: string,
    }

    record prompt-get-params {
        name: string,
        arguments: string,  // JSON string
    }

    /// Method response types
    variant response {
        // Tool responses
        tools-list(list<tool>),
        tools-call(tool-result),
        
        // Resource responses
        resources-list(list<resource-info>),
        resources-read(resource-contents),
        resources-subscribe,
        resources-unsubscribe,
        
        // Prompt responses
        prompts-list(list<prompt>),
        prompts-get(list<prompt-message>),
        
        // Other
        pong,
        error(error),
    }
}

// The main MCP world that components export
world spin-mcp {
    use mcp-types.{request, response};
    
    /// Handle an MCP request and return a response
    export handle-request: func(request: request) -> response;
    
    /// Optional: Initialize the MCP server (called once on startup)
    export initialize: func() -> result<_, string>;
}

// SDK world for MCP components to import utilities
world spin-mcp-sdk {
    import mcp-types;
}